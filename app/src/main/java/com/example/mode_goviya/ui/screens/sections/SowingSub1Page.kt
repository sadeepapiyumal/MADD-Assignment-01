package com.example.mode_goviya.ui.screens.sections

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.RectangleShape
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.mode_goviya.R
import com.example.mode_goviya.ui.components.SpeakerTtsButton

@Composable
fun SowingSub1Page(navController: NavController) {
    val descriptionText = "‡∑Ä‡∑ì ‡∑Ä‡∂ú‡∑è‡∑Ä ‡∑É‡∂≥‡∑Ñ‡∑è ‡∑É‡∑ë‡∂∏ ‡∑Ä‡∑í‡∂ß‡∂∏ ‡∂¥‡∑Ö‡∑Ä‡∑ì‡∂∏‡∑ö ‡∑Å‡∂ö‡∑ä‡∂≠‡∑í‡∂∫‡∑ô‡∂±‡∑ä ‡∑Ä‡∑ê‡∂©‡∑í, ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∑Ä‡∑ì ‡∑Ä‡∂ª‡∑ä‡∂ú ‡∑É‡∂∏‡∂ú ‡∂∏‡∑í‡∑Å‡∑ä‚Äç‡∂ª‡∑Ä ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠‡∑í, " +
            "‡∂Ö‡∂¥‡∂Ø‡∑ä‚Äç‡∂ª‡∑Ä‡∑ä‚Äç‡∂∫, ‡∑Ä‡∂Ω‡∑ä ‡∂∂‡∑ì‡∂¢ ‡∑Ñ‡∑è ‡∑Ñ‡∑è‡∂±‡∑í ‡∑Ä‡∑ñ ‡∂∂‡∑ì‡∂¢ ‡∂Ö‡∑Ä‡∂∏ ‡∂∏‡∂ß‡∑ä‡∂ß‡∂∏‡∂ö‡∑í‡∂±‡∑ä ‡∂¥‡∑Ä‡∂≠‡∑í‡∂± ‡∂ã‡∑É‡∑É‡∑ä ‡∂ú‡∑î‡∂´‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∂∑‡∑è‡∑Ä‡∂∫‡∑ô‡∂±‡∑ä ‡∂∫‡∑î‡∂≠‡∑î ‡∂∂‡∑í‡∂≠‡∑ä‡∂≠‡∂ª ‡∑Ä‡∑ì ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑Ö ‡∂∫‡∑î‡∂≠‡∑î‡∂∫. " +
            "‡∂ë‡∂∏‡∂ú‡∑í‡∂±‡∑ä ‡∂±‡∑í‡∂ª‡∑ù‡∂ú‡∑ì, ‡∑Å‡∂ö‡∑ä‡∂≠‡∑í‡∂∏‡∂≠‡∑ä, ‡∂í‡∂ö‡∑è‡∂ö‡∑è‡∂ª‡∑ì ‡∂¥‡∑ê‡∂Ω ‡∂ú‡∑Ñ‡∂´‡∂∫‡∂ö‡∑ä ‡∑Ñ‡∑è ‡∂â‡∑Ñ‡∑Ö ‡∂Ö‡∑É‡∑ä‡∑Ä‡∑ê‡∂±‡∑ä‡∂±‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è‡∂ú‡∂≠ ‡∑Ñ‡∑ê‡∂ö‡∑í‡∂∫.\n\n" +
            "‡∑Ä‡∂ú‡∑è‡∑Ä ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂ö‡∂ª‡∂± ‡∂∂‡∑í‡∂≠‡∑ä‡∂≠‡∂ª ‡∑Ä‡∑ì ‡∂ö‡∑ò‡∑Ç‡∑í‡∂ö‡∂ª‡∑ä‡∂∏ ‡∂Ø‡∑ô‡∂¥‡∑è‡∂ª‡∑ä‡∂≠‡∂∏‡∑ö‡∂±‡∑ä‡∂≠‡∑î‡∑Ä‡∑ö ‡∂∂‡∑í‡∂≠‡∑ä‡∂≠‡∂ª ‡∂ú‡∑ú‡∑Ä‡∑í‡∂¥‡∑Ö‡∑Ä‡∂Ω‡∑í‡∂±‡∑ä ‡∑Ñ‡∑è ‡∂Ω‡∑í‡∂∫‡∑è‡∂¥‡∂Ø‡∑í‡∂Ç‡∂†‡∑í ‡∂ú‡∑ú‡∑Ä‡∑ì‡∂±‡∑ä‡∂ú‡∑ô‡∂±‡∑ä ‡∂Ω‡∂∂‡∑è‡∂ú‡∂≠ ‡∑Ñ‡∑ê‡∂ö‡∑í ‡∂Ö‡∂≠‡∂ª " +
            "‡∂ú‡∑ú‡∑Ä‡∑í‡∂∏‡∑Ñ‡∂≠‡∑î‡∂±‡∑ä‡∂ß ‡∂≠‡∂∏‡∑è ‡∑Ä‡∑í‡∑É‡∑í‡∂±‡∑ä‡∂∏ ‡∂∂‡∑í‡∂≠‡∑ä‡∂≠‡∂ª ‡∑Ä‡∑ì ‡∂±‡∑í‡∑Ç‡∑ä‡∂¥‡∑è‡∂Ø‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂Ø ‡∂ö‡∑Ö‡∑ê‡∂ö‡∑í‡∂∫.\n\n" +
            "‡∂±‡∑í‡∂∫‡∂∏‡∑í‡∂≠ ‡∂ö‡∂±‡∑ä‡∂±‡∂∫‡∂ß ‡∑É‡∑Ñ ‡∂∫‡∑è‡∂∫‡∑ö ‡∑É‡∑í‡∂∫‡∂Ω‡∑î ‡∂ú‡∑ú‡∑Ä‡∑ì‡∂±‡∑ä ‡∂ë‡∂ö‡∂ß ‡∑Ä‡∂ú‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∂≠‡∑î‡∑Ö‡∑í‡∂±‡∑ä ‡∑Ä‡∂ª‡∑ä‡∑Ç‡∑è ‡∂¢‡∂Ω‡∂∫ ‡∂ã‡∂¥‡∂ª‡∑í‡∂∏ ‡∂Ω‡∑ô‡∑É ‡∂¥‡∑ä‚Äç‡∂ª‡∂∫‡∑ù‡∂¢‡∂±‡∂∫‡∂ß ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂≠‡∑ä, " +
            "‡∂ª‡∑ù‡∂ú ‡∑Ñ‡∑è ‡∂¥‡∂Ω‡∑í‡∂∂‡∑ù‡∂∞ ‡∑Ä‡∂Ω‡∑í‡∂±‡∑ä ‡∑Ä‡∂ú‡∑è‡∑Ä ‡∂Ü‡∂ª‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂≠‡∑ä, ‡∑Ä‡∑è‡∂ª‡∑í ‡∂¢‡∂Ω‡∂∫ ‡∂ö‡∑è‡∂ª‡∑ä‡∂∫‡∂ö‡∑ä‡∑Ç‡∂∏‡∑Ä ‡∂¥‡∑ä‚Äç‡∂ª‡∂∫‡∑ù‡∂¢‡∂±‡∂∫‡∂ß ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂≠‡∑ä ‡∑É‡∑í‡∂Ø‡∑î‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö.\n\n" +
            "‡∑Ä‡∑í‡∂∫‡∂Ω‡∑í ‡∑É‡∑Ñ ‡∂Ö‡∂≠‡∂ª‡∂∏‡∑ê‡∂Ø‡∑í ‡∂ö‡∂Ω‡∑è‡∂¥‡∑Ä‡∂Ω ‡∑Ä‡∂ª‡∑ä‡∑Ç‡∑è‡∂¥‡∑ù‡∑Ç‡∑í‡∂≠ ‡∂ö‡∑î‡∂π‡∑î‡∂ª‡∑î‡∑Ä‡∂Ω ‡∂∫‡∂Ω ‡∑É‡∑Ñ ‡∂∏‡∑Ñ ‡∂ö‡∂±‡∑ä‡∂±‡∂∫‡∑ö ‡∑Ä‡∑ì ‡∑Ä‡∂ú‡∑è‡∑Ä ‡∂ö‡∑Ö ‡∂∫‡∑î‡∂≠‡∑î ‡∂Ü‡∂ö‡∑è‡∂ª‡∂∫‡∑ö ‡∂¥‡∑Ñ‡∂≠ ‡∑Ä‡∂ú‡∑î ‡∑Ä‡∂Ω ‡∑É‡∂≥‡∑Ñ‡∂±‡∑ä ‡∑Ä‡∑ö."

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFDFFFD6)) // light green background
            .padding(16.dp)
            .verticalScroll(rememberScrollState()), // allow scrolling
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Top
    ) {

        // Title row with text (left) and image (right)
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 16.dp),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.Top
        ) {
            Text(
                text = "‡∂∂‡∑ì‡∂¢ ‡∑Ä‡∑ê‡∂¥‡∑í‡∂ª‡∑ì‡∂∏",
                fontSize = 24.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF034503),
                textAlign = TextAlign.Start,
                modifier = Modifier
                    .weight(1f)
                    .offset(y = 10.dp),
            )

            Image(
                painter = painterResource(id = R.drawable.sowing),
                contentDescription = "Egg Seed Usage",
                modifier = Modifier
                    .size(100.dp)
                    .offset(y = (-15).dp)
            )
        }

        Spacer(modifier = Modifier.height(8.dp))

        // Page Title
        Text(
            text = "‡∂∂‡∑í‡∂≠‡∑ä‡∂≠‡∂ª ‡∑Ä‡∑ì ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∂∫",
            fontSize = 24.sp,
            fontWeight = FontWeight.Bold,
            color = Color(0xFF034503),
            textAlign = TextAlign.Left,
            modifier = Modifier.fillMaxWidth()
        )

        Spacer(modifier = Modifier.height(12.dp))

        // Page description before tables
        Text(
            text = descriptionText,
            fontSize = 16.sp,
            textAlign = TextAlign.Justify,
            color = Color.Black,
            modifier = Modifier.fillMaxWidth()
        )

        Spacer(modifier = Modifier.height(16.dp))

        // üîä Speaker icon button near header to read the description
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.End,
            verticalAlignment = Alignment.CenterVertically
        ) {
            SpeakerTtsButton(textToSpeak = descriptionText)
        }

        Spacer(modifier = Modifier.height(20.dp))

        // First subtopic card with table
        SubTopicCardWithTable(
            title = "‡∂∏‡∑Ñ ‡∂ö‡∂±‡∑ä‡∂±‡∑ö ‡∂∂‡∑í‡∂∏‡∑ä ‡∑É‡∑ê‡∂ö‡∑É‡∑ì‡∂∏ ‡∑É‡∑Ñ ‡∑Ä‡∑ê‡∂¥‡∑í‡∂ª‡∑ì‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è\n‡∑É‡∑î‡∂Ø‡∑î‡∑É‡∑î ‡∑Ä‡∑ì ‡∑Ä‡∂ú‡∑è ‡∂ö‡∑è‡∂Ω‡∑É‡∂ß‡∑Ñ‡∂±",
            description = "",
            tableData = listOf(
                listOf("‡∑Ä‡∂∫‡∑É‡∑ä ‡∂ö‡∑è‡∂´‡∑ä‡∂©‡∂∫", "‡∂∂‡∑í‡∂∏‡∑ä ‡∑É‡∑ê‡∂ö‡∑É‡∑ì‡∂∏", "‡∑Ä‡∑ê‡∂¥‡∑í‡∂ª‡∑ì‡∂∏"),
                listOf("‡∂∏‡∑è‡∑É 4 ‚Äì 4   ‡∑Ñ‡∂∏‡∑è‡∂ª", "‡∑É‡∑ê‡∂¥‡∑ä‡∂≠‡∑ê‡∂∏‡∑ä‡∂∂‡∂ª‡∑ä ‡∂∏‡∑ê‡∂Ø", "‡∂î‡∂ö‡∑ä‡∂≠‡∑ù‡∂∂‡∂ª‡∑ä ‡∂∏‡∑î‡∂Ω"),
                listOf("‡∂∏‡∑è‡∑É 3  ‡∑Ñ‡∂∏‡∑è‡∂ª", "‡∑É‡∑ê‡∂¥‡∑ä‡∂≠‡∑ê‡∂∏‡∑ä‡∂∂‡∂ª‡∑ä ‡∂Ö‡∂ú", "‡∂î‡∂ö‡∑ä‡∂≠‡∑ù‡∂∂‡∂ª‡∑ä ‡∂∏‡∑ê‡∂Ø"),
                listOf("‡∂∏‡∑è‡∑É 3", "‡∂î‡∂ö‡∑ä‡∂≠‡∑ù‡∂∂‡∂ª‡∑ä ‡∂∏‡∑î‡∂Ω", "‡∂î‡∂ö‡∑ä‡∂≠‡∑ù‡∂∂‡∂ª‡∑ä ‡∂Ö‡∂ú"),
                listOf("‡∂Ø‡∑í‡∂± 80 - 85", "‡∂î‡∂ö‡∑ä‡∂≠‡∑ù‡∂∂‡∂ª‡∑ä ‡∂∏‡∑ê‡∂Ø", "‡∂±‡∑ú‡∑Ä‡∑ê‡∂∏‡∑ä‡∂∂‡∂ª‡∑ä ‡∂∏‡∑î‡∂Ω")
            )
        )

        // Second subtopic card with table
        SubTopicCardWithTable(
            title = "‡∂∫‡∂Ω ‡∂ö‡∂±‡∑ä‡∂±‡∑ö ‡∂∂‡∑í‡∂∏‡∑ä ‡∑É‡∑ê‡∂ö‡∑É‡∑ì‡∂∏ ‡∑É‡∑Ñ ‡∑Ä‡∑ê‡∂¥‡∑í‡∂ª‡∑ì‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è\n‡∑É‡∑î‡∂Ø‡∑î‡∑É‡∑î ‡∑Ä‡∑ì ‡∑Ä‡∂ú‡∑è ‡∂ö‡∑è‡∂Ω‡∑É‡∂ß‡∑Ñ‡∂±",
            description = "",
            tableData = listOf(
                listOf("‡∑Ä‡∂∫‡∑É‡∑ä ‡∂ö‡∑è‡∂´‡∑ä‡∂©‡∂∫", "‡∂∂‡∑í‡∂∏‡∑ä ‡∑É‡∑ê‡∂ö‡∑É‡∑ì‡∂∏", "‡∑Ä‡∑ê‡∂¥‡∑í‡∂ª‡∑ì‡∂∏"),
                listOf("‡∂∏‡∑è‡∑É 4 ‚Äì 4   ‡∑Ñ‡∂∏‡∑è‡∂ª", "‡∂∏‡∑è‡∂ª‡∑ä‡∂≠‡∑î ‡∂∏‡∑ê‡∂Ø", "‡∂Ö‡∂¥‡∑ä‚Äç‡∂ª‡∑ö‡∂Ω‡∑ä ‡∂∏‡∑î‡∂Ω"),
                listOf("‡∂∏‡∑è‡∑É 3  ‡∑Ñ‡∂∏‡∑è‡∂ª", "‡∂∏‡∑è‡∂ª‡∑ä‡∂≠‡∑î ‡∂Ö‡∂ú", "‡∂Ö‡∂¥‡∑ä‚Äç‡∂ª‡∑ö‡∂Ω‡∑ä ‡∂∏‡∑ê‡∂Ø"),
                listOf("‡∂∏‡∑è‡∑É 3", "‡∂Ö‡∂¥‡∑ä‚Äç‡∂ª‡∑ö‡∂Ω‡∑ä ‡∂∏‡∑î‡∂Ω", "‡∂Ö‡∂¥‡∑ä‚Äç‡∂ª‡∑ö‡∂Ω‡∑ä ‡∂∏‡∑ê‡∂Ø"),
                listOf("‡∂Ø‡∑í‡∂± 80 - 85", "‡∂Ö‡∂¥‡∑ä‚Äç‡∂ª‡∑ö‡∂Ω‡∑ä   ‡∂Ö‡∂ú", "‡∂∏‡∑ê‡∂∫‡∑í ‡∂∏‡∑ê‡∂Ø")
            )
        )
    }
}

@Composable
fun SubTopicCardWithTable(title: String, description: String, tableData: List<List<String>>) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp),
        shape = RectangleShape,
        colors = CardDefaults.cardColors(containerColor = Color(0xFFFFF7E6))
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Text(
                text = title,
                fontSize = 14.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF034503)
            )
            Spacer(modifier = Modifier.height(6.dp))
            if (description.isNotEmpty()) {
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.Center,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    SpeakerTtsButton(textToSpeak = description)
                }
                Spacer(modifier = Modifier.height(6.dp))
                Text(
                    text = description,
                    fontSize = 16.sp,
                    textAlign = TextAlign.Justify,
                    color = Color.Black
                )
                Spacer(modifier = Modifier.height(8.dp))
            }

            // Table
            SimpleTable(tableData)
        }
    }
}

@Composable
fun SimpleTable(data: List<List<String>>) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(top = 8.dp)
    ) {
        data.forEach { row ->
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 2.dp),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                row.forEach { cell ->
                    Box(
                        modifier = Modifier
                            .weight(1f)
                            .height(60.dp)
                            .padding(2.dp)
                            .background(Color(0xFFE0F7FA))
                            .padding(6.dp),
                        contentAlignment = Alignment.Center
                    ) {
                        Text(
                            text = cell,
                            fontSize = 14.sp,
                            textAlign = TextAlign.Center
                        )
                    }
                }
            }
        }
    }
}
